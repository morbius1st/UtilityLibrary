

// Selection Modes


selection modes (does not combine - each mode denies the other modes)
  D
  o
  n									-whole tree-
  e									---can be---
-- mode -----------					-selected?--
0 * individual							no		(selecting a node does not select anything else - nodes or leaves)
1   individual + leaves					no		(selecting a node does not select other nodes but does select the nodes leaves)
2 * extended							no		(selected a nodes selects all child nodes, etc but does not select leaves)
3   extended + leaves					no		(selected a nodes selects all child nodes and all nodes leaves)
4 * tristate -							yes		(a node can have (3) different states of selection - selecting a node does not select leaves)
	  												state A: not selected / leaves do not get selected or deselected
	  												state B: individual node selected  / leaves do not get selected or deselected
	  												state C: node + all child nodes are selected / leaves do not get selected or deselected
5   tristate -							yes		(a node can have (3) different states of selection - selecting a node does select leaves)
	  												state A: not selected / leaves do not get selected or deselected
	  												state B: individual node and leaves selected 
	  												state C: node + all child nodes and leaves are selected
6 * MultiSelectNode						yes		(can select multiple individual nodes - does not select leaves)
7 * MultiSelectNode-extended			yes		(can select multiple individual nodes - does not select leaves - and, selecting a branch, selects the whole branch)
8   MultiSelectNode-extended + leaves	yes		(can select multiple individual nodes - does not select leaves - and, selecting a branch, selects the whole branch)
9   MultiSelectNode + leaves			yes		(can select multiple individual nodes and does select leaves)
10  MultiSelectLeaf						yes		(can select multiple individual leaves)


mode names: INDIVIDUAL, INDIVIDUALPLUS, EXTENDED, EXTENDEDPLUS
TRISTATE, TRISTATEPLUS, MUTLISELECTNODE, MUTLISELECTNODEXTENDED, 
MULTISELECTNODEPLUS, MULTISELECTLEAF

when mode is ...PLUS, leaf selections are disabled


NOTES:
1. for the (3) multiselect modes, there will be a List<> of the selected objects
2. for the individual selection options (node or leaf, individual or multiselect) 
	an event gets raised that provides the node selected.
3. for the individual slection options (node, individual or multiselect) 
	the selected node is also saved in "last selected node"  this is cleared only
	from a deselect method
4. for leave selection, no prior selection list



** TREE class

// methods
// tree
	(void)	    		Clear()


// system overrides
	(IEnumerator)			GetEnumerator()
	(IEnumerator<TreeNode>)	GetEnumerator()
	(string)	    		ToString()

// node (should be a method in TreeNode)
	(bool)	    		AddNode(TreeNode node, TreeNode? addNode)
		notes:	node added becomes the CurrentNode

	(bool)	    		AddNode(TreeNode newNode, List<string> nodePath)
		notes:	node added becomes the CurrentNode

	(bool)	    		ContainsNode(string nodeKey)
		notes:	found node added becomes the FoundtNode

	(bool)	    		ContainsNode(string findKey, out TreeNode node, TreeNode? startNode, int nth, bool firstMatch)
		notes:	found node added becomes the FoundtNode

	(bool)	    		DeleteNode(TreeNode? node)
	(bool)	    		DeleteNode(List<string> nodePath, out TreeNode? node)
	(bool)	    		MoveNode(TreeNode? sourceNode, TreeNode? destinationNode)
		notes:	node moved becomes the CurrentNode

	(bool)	    		RenameNode(TreeNode node, string newName)
	(int)	    		GetMatchingNodes(string findKey, TreeNode? startNode, int nth, bool firstMatch)
	(int)	    		CountMatchingNodes(string nodeKey, TreeNode? startPoint)
	(IEnumerable
		<TreeNode>)	    GetNodes(TreeNode startNode)


// leaf (should be a method in TreeNode)
	(bool)	    		AddLeaf(TreeLeaf leaf, TreeNode node)
	(bool)	    		ContainsLeaf(string findKey, out TreeLeaf leaf, TreeNode? startNode, int nth, bool firstMatch)
	(bool)	    		DeleteLeaf(TreeNode? node, TreeLeaf? leaf)
	(bool)	    		MoveLeaf(TreeNode? source, TreeNode? destination, string leafKey, out TreeLeaf leaf)
	(bool)	    		RenameLeaf(TreeNode node, string oldKey, string newKey)
	(int)	    		GetMatchingLeaves(string findKey, TreeNode? startNode, int nth, bool firstMatch)
	(int)	    		CountMatchingLeaves(string leafKey, TreeNode? startPoint)
	(IEnumerable
		<TreeLeaf>)	    GetLeaves(TreeNode startNode)


// properties	
	(string)			TreeName

	(int)				MaxDepth
	(bool)				RequireUniqueKeys
	(bool)				IsTriState

	(TNd)				NodeData

	(int)				CountNodesRoot
	(int)				CountNodesTree
	(int)				CountNodesCurrent
	(int)				CountNodesCurrentEx
	(int)				CountNodesSelected
	(int)				CountNodesSelectedEx

	(int)				CountLeavesRoot
	(int)				CountLeavesTree
	(int)				CountLeavesCurrent
	(int)				CountLeavesCurrentEx
	(int)				CountLeavesSelected
	(int)				CountLeavesSelectedEx

	(TreeNode)			RootNode
	(TreeNode)			CurrentNode

	(TreeNode)			FoundNode
	(List<TreeNodes>)	FoundNodes
	(TreeLeaf)			FoundLeaf
	(List<TreeLeaf>)	FoundLeaves


// events							   
	PropertyChanged	




** TREENODE class

// methods
// general
	(void)	    		NotifyNodesUpdated()
	(object)	    	Clone()

// node
	(void)	    		InitNodes()

	(void)	    		AddNode(string key, TreeNode node)
	(bool)	    		TryAddNode(string key, TreeNode node)
	(bool)	    		ContainsNode(string findKey)
	(bool)	    		ContainsNode(string findKey, out TreeNode node)
	(bool)	    		DeleteNode(string nodeKey)
	(bool)	    		TryDeleteNode(string nodeKey)
	(bool)	    		ReplaceKeyNode(string oldkey, string newKey)
	(int)	    		NodeCountBranch()

// leaf
	(void)	    		InitLeaves()

	(void)	    		AddLeaf(string key, TreeLeaf leaf)
	(bool)	    		TryAddNode(string key, TreeLeaf leaf)
	(bool)	    		ContainsLeaf(string leafKey)
	(bool)	    		DeleteLeaf(string leafKey)
	(bool)	    		TryDeleteLeaf(string leafKey)
	(bool)	    		ReplaceKeyLeaf(string oldkey, string newKey)
	(int)	    		LeafCountBranch()


// properties
	(ObservableDictionary
		<string,TreeNode>?)	    Nodes
	(ObservableDictionary
		<string,TreeLeaf>?)	    Leaves

	(string)	    	NodeKey

	(Tree)	    		Tree

	(bool?)	    		IsSelected
	(bool)	    		IsChosen
	(bool)	    		IsExpanded
	(bool)	    		IsNodesNull
	(bool)	    		IsLeavesNull

	(TNd)	    		NodeData

	(ITreeNode)	    	ParentNode
	(TreeNode)	    	ParentNodeEx
	(bool)	    		HasNodes
	(int)	    		CountNodes
	(int)	    		CountNodesEx
	(TreeNode)			FoundNode

	(bool)	    		HasLeaves
	(int)	    		CountLeaves
	(int)	    		CountLeavesEx
	(TreeLeaf)	    	FoundLeaf


// system overrides
	(int)	    		Compare(TreeNode? x, TreeNode? y)
	(string)		    ToString()

// event
	(PropertyChangedEventHandler?)	    PropertyChanged




** TREE LEAF class
   
// methods
// general
	(object)	    	Clone()

	(bool)	    		MoveParent(TreeNode node)


// public properties
	(bool?)	    		IsSelected
	(bool)	    		IsChosen

	(TLd)	    		LeafData
	(string)	    	LeafKey
	(ITreeNode)	    	ParentNode


// system overrides
	(int)	    		Compare(TreeLeaf? x, TreeLeaf? y)
	(string)			ToString()


// event
	(PropertyChangedEventHandler?)	    PropertyChanged





// selection process

// tristate

* tri-state

*** use utility example project to do this ***

tree tristate process (check box actually)
unchecked -> checked -> mixed -> unchecked


> checked, selected & all sub-nodes selected
> indetermanent, some sub-nodes selected
> not-checked, not selected & all sub-nodes not selected

examples
 1         | 2         | 3         | 4         | 4.5       | 5         | 6         | 7         | 7         |
-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|
 [ ]       | [o]       | [o]       | [o]       | [x]       | [o]       | [ ]       | [x]       | [o]       |
-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|
   [ ]     |   [ ]     |   [ ]     |   [x]     |   [x]     |   [x]     |   [ ]     |   [x]     |   [x]     |
-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|
   [ ]     |   [o]     |   [x]     |   [x]     |   [x]     |   [ ]     |   [ ]     |   [x]     |   [ ]     |
-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|
       [ ] |       [x] |       [x] |       [x] |       [x] |       [ ] |       [ ] |       [x] |       [ ] |
-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|
       [ ] |       [ ] |       [x] |       [x] |       [x] |       [ ] |       [ ] |       [x] |       [ ] |
-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|
   [ ]     |   [ ]     |   [ ]     |   [ ]     |   [x]     |   [ ]     |   [ ]     |   [x]     |   [x]     |
-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|-----------|

 0         | 1           | 1.2         | 1.2.1       | 1.2.1.1     | 1.2.1.1.1   | 1.2.1.1.1.1 | 1.2.1x5     | 1.2.1x6     | 1.2.1x7     |
-----------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|
 [ ]       | [o/ ]       |* [x/x]      |*[ / ]       |* [o/o]      | [o/o]       | [o/o]       | [o/o]       | [x/o]       | [o/o]       |
-----------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|
   [ ]     |*  [x/x]     |   [x/x]     |   [ /x]     |    [x/x]    |   [x/x]     |   [x/x]     |   [x/x]     |   [x/x]     |   [x/x]     |
-----------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|
   [ ]     |   [o/ ]     |   [x/o]     |   [ /o]     |    [o/o]    |*  [x/o]     |*  [ /o]     |*  [o/o]     |*  [x/o]     |*  [ /o]     |
-----------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|
      [ ]  |*     [x/x]  |      [x/x]  |      [ /x]  |      [x/x]  |      [x/x]  |      [ /x]  |      [x/x]  |      [x/x]  |      [ /x]  |
-----------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|
      [ ]  |      [ / ]  |      [x/ ]  |      [ / ]  |      [ / ]  |      [x/ ]  |      [ / ]  |      [ / ]  |      [x/ ]  |      [ / ]  |
-----------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|
   [ ]     |   [ / ]     |   [x/ ]     |   [ / ]     |   [ / ]     |   [ / ]     |   [ / ]     |*  [x/ ]     |   [x/ ]     |   [x/ ]     |
-----------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|
   [ ]     |*  [x/x]     |   [x/x]     |   [ /x]     |   [x/x]     |   [x/x]     |   [x/x]     |   [x/x]     |   [x/x]     |   [x/x]     |
-----------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|-------------|

not selected -> indeterminant -> selected -> not selected
x = soft check | X = hard check
m = soft mixed | M = hard mixed
u = soft unckd | U = hard unckd

 a0            | a1            | a2            | a2            | a2              | a2              |
---------------|---------------|---------------|---------------|-----------------|-----------------|
 [ ]           | [m]           | [x]           |*[X]           |*[U/ ]           |*[M/ ]           |
---------------|---------------|---------------|---------------|-----------------|-----------------|
   [ ]         |   [ ]         |   [ ]         |   [x]         |   [ /x]         |   [ /x]         |
---------------|---------------|---------------|---------------|-----------------|-----------------|
   [ ]         |   [m]         |   [x]         |   [x]         |   [ /x]         |   [ /x]         |
---------------|---------------|---------------|---------------|-----------------|-----------------|
      [ ]      |      [ ]      |*     [X]      |      [X]      |      [ /X]      |      [ /X]      |
---------------|---------------|---------------|---------------|-----------------|-----------------|
      [ ]      |*     [X]      |      [X]      |      [X]      |      [ /X]      |      [ /X]      |
---------------|---------------|---------------|---------------|-----------------|-----------------|
        [ ]    |        [x]    |        [x]    |        [x]    |        [ /x]    |        [ /x]    |
---------------|---------------|---------------|---------------|-----------------|-----------------|
        [ ]    |        [x]    |        [x]    |        [x]    |        [ /x]    |        [ /x]    |
---------------|---------------|---------------|---------------|-----------------|-----------------|
          [ ]  |          [x]  |          [x]  |          [x]  |          [ /x]  |          [ /x]  |
---------------|---------------|---------------|---------------|-----------------|-----------------|
          [ ]  |          [x]  |          [x]  |          [x]  |          [ /x]  |          [ /x]  |
---------------|---------------|---------------|---------------|-----------------|-----------------|


not selected -> indeterminant -> selected -> not selected

x = check
m = mixed
u = unckd
- = unset

 a0              | a1              | a2              |           ax              | ax              |
-----------------|-----------------|-----------------|          -----------------|-----------------|
 [u/u]           | [m/u]           | [u/u]           |           [m/u]           | [u/u]           |
-----------------|-----------------|-----------------|          -----------------|-----------------|
   [u/u]         |   [u/u]         |   [u/u]         |             [u/u]         |   [u/u]         |
-----------------|-----------------|-----------------|          -----------------|-----------------|
   [u/u]         |   [m/u]         |   [u/u]         |             [m/u]         |   [u/u]         |
-----------------|-----------------|-----------------|          -----------------|-----------------|
      [u/u]      |      [u/u]      |      [u/u]      |                [u/u]      |      [u/u]      |
-----------------|-----------------|-----------------|          -----------------|-----------------|
      [u/u]      |      [m/u]      |      [u/u]      |          *     [x/u]      |*     [m/u]      |
-----------------|-----------------|-----------------|          -----------------|-----------------|
        [u/u]    |*       [x/u]    |*       [u/u]    |                  [x/u]    |        [x/x]    |
-----------------|-----------------|-----------------|          -----------------|-----------------|
        [u/u]    |        [u/u]    |        [u/u]    |                  [x/u]    |        [u/u]    |
-----------------|-----------------|-----------------|          -----------------|-----------------|
          [u/u]  |          [u/u]  |          [u/u]  |                    [x/u]  |          [u/u]  |
-----------------|-----------------|-----------------|          -----------------|-----------------|
          [u/u]  |          [u/u]  |          [u/u]  |                    [x/u]  |          [u/u]  |
-----------------|-----------------|-----------------|          -----------------|-----------------|
notes:
a2: if checked is re-checked -> children: return to prior | parents: return to prior



 b0              | b1              | b2              |
-----------------|-----------------|-----------------|
 [u/u]           | [m/u]           | [u/u]           |
-----------------|-----------------|-----------------|
   [u/u]         |   [u/u]         |   [u/u]         |
-----------------|-----------------|-----------------|
   [u/u]         |   [m/u]         |   [u/u]         |
-----------------|-----------------|-----------------|
      [u/u]      |      [u/u]      |      [u/u]      |
-----------------|-----------------|-----------------|
      [u/u]      |      [m/u]      |      [u/u]      |
-----------------|-----------------|-----------------|
        [u/u]    |        [u/u]    |        [u/u]    |
-----------------|-----------------|-----------------|
        [u/u]    |*       [x/u]    |*       [u/u]    |
-----------------|-----------------|-----------------|
          [u/u]  |          [x/u]  |          [u/u]  |
-----------------|-----------------|-----------------|
          [u/u]  |          [x/u]  |          [u/u]  |
-----------------|-----------------|-----------------|
b1: if node checked: children: save state, then check | parents: if any children are mixed -> mixed, else checked
b2: if checked is re-checked -> children: return to prior | return to prior


 c0              | c1              | c2              | c3              |
-----------------|-----------------|-----------------|-----------------|
 [u/u]           | [m/u]           | [m/u]           | [m/u]           |
-----------------|-----------------|-----------------|-----------------|
   [u/u]         |   [u/u]         |   [u/u]         |   [u/u]         |
-----------------|-----------------|-----------------|-----------------|
   [u/u]         |   [m/u]         |   [m/u]         |   [m/u]         |
-----------------|-----------------|-----------------|-----------------|
      [u/u]      |      [u/u]      |      [u/u]      |      [u/u]      |
-----------------|-----------------|-----------------|-----------------|
      [u/u]      |      [m/u]      |      [m/u]      |      [m/u]      |
-----------------|-----------------|-----------------|-----------------|
        [u/u]    |        [u/u]    |        [u/u]    |        [u/u]    |
-----------------|-----------------|-----------------|-----------------|
        [u/u]    |        [m/u]    |*       [x/u]    |*       [u/u]    |
-----------------|-----------------|-----------------|-----------------|
          [u/u]  |*         [x/u]  |          [x/x]  |          [x/x]  |
-----------------|-----------------|-----------------|-----------------|
          [u/u]  |          [u/u]  |          [x/u]  |          [x/u]  |
-----------------|-----------------|-----------------|-----------------|
c1: if node checked: children: save state, then check | parents: if any children are mixed -> mixed, else checked
c2: if parent checked -> children: save checked, move to next state | parents: no change



not selected -> indeterminant -> selected -> not selected

               |               |               |                |               |               |  
---------------|---------------|---------------| ---------------|---------------|---------------|  
 [ ]           | [m]           | [ ]           |  [m]           | [m]           | [m]           |  
---------------|---------------|---------------| ---------------|---------------|---------------|  
   [ ]         |   [ ]         |   [ ]         |    [ ]         |   [ ]         |   [ ]         |  
---------------|---------------|---------------| ---------------|---------------|---------------|  
   [ ]         |   [m]         |   [ ]         |    [m]         |   [m]         |   [m]         |  
---------------|---------------|---------------| ---------------|---------------|---------------|  
      [ ]      |      [ ]      |      [ ]      |       [ ]      |      [ ]      |      [ ]      |  
---------------|---------------|---------------| ---------------|---------------|---------------|  
      [ ]      |*     [x]      |*     [ ]      |       [m]      |      [x]      |      [m]      |  
---------------|---------------|---------------| ---------------|---------------|---------------|  
        [ ]    |        [x]    |        [ ]    |         [x]    |        [x]    |        [x]    |  
---------------|---------------|---------------| ---------------|---------------|---------------|  
        [ ]    |        [x]    |        [ ]    |         [ ]    |*       [x]    |*       [ ]    |  
---------------|---------------|---------------| ---------------|---------------|---------------|  
          [ ]  |          [x]  |          [ ]  |           [ ]  |          [x]  |          [ ]  |  
---------------|---------------|---------------| ---------------|---------------|---------------|  
          [ ]  |          [x]  |          [ ]  |           [ ]  |          [x]  |          [ ]  |  
---------------|---------------|---------------| ---------------|---------------|---------------|  




x = check
m = mixed
- = notck


  1             | 2             | 3             | 4             | 5             | 6             |
 ---------------|---------------|---------------|---------------|---------------|---------------|
A [-]           | [m]           | [m]           | [m]           | [-]           | [m]           |
 ---------------|---------------|---------------|---------------|---------------|---------------|
B   [-]         |   [-]         |   [-]         |   [-]         |   [-]         |   [-]         |
 ---------------|---------------|---------------|---------------|---------------|---------------|
C   [-]         |   [m]         |   [m]         |   [m]         |   [-]         |   [m]         |
 ---------------|---------------|---------------|---------------|---------------|---------------|
D      [-]      |      [-]      |      [-]      |      [-]      |      [-]      |      [-]      |
 ---------------|---------------|---------------|---------------|---------------|---------------|
E      [-]      |      [m]      |      [m]      |*     [x]m     |*     [-]m     |*     [m]      |
 ---------------|---------------|---------------|---------------|---------------|---------------|
F        [-]    |        [-]    |*       [x]    |        [x]x   |        [-]x   |        [x]    |
 ---------------|---------------|---------------|---------------|---------------|---------------|
G        [-]    |        [m]    |        [m]    |        [x]m   |        [-]m   |        [m]    |
 ---------------|---------------|---------------|---------------|---------------|---------------|
H          [-]  |*         [x]  |          [x]  |          [x]x |          [-]x |          [x]  |
 ---------------|---------------|---------------|---------------|---------------|---------------|
I          [-]  |          [-]  |          [-]  |          [x]  |          [-]  |          [-]  |
 ---------------|---------------|---------------|---------------|---------------|---------------|
 
4: when M is checked: node: to x & use tristate is true (pass to each child)|  children: if tristate: save state: check | parent: adjust depending on checked children
5: when X is checked & use tristate is true: node: to - | children: uncheck | parents: uncheck / mixed depending on checked children
6: when - is checked & use tristate is true: node: to M: | children: to prior (use tristate is false) | parents: mixed or checked depending on children

treeclass processes
unchecked -> mixed -> checked -> unchecked

checkbox process
unchecked -> checked -> mixed -> unchecked
(false)      (true)     (null)

when m is checked (e.g., m parent node)

m -> x
	> tell children: x
	> parents now x


if checked when unchecked  (any node)
	-> self: checked
	-> parents: check or mixed depending on children selected
		-> if (less than all selected) -> mixed
		-> if (if all selected) -> checked
	-> children: check

if checked when checked (parent node)
	-> self: unchecked
	-> parents: mixed or unchecked (per child checked)
	-> children: unchecked


if checked when checked (child node)
	-> self: unchecked
	-> parents: mixed or unchecked (per child checked)
	-> children: unchecked


if checked when mixed (a child must be selected)
	-> self: checked
	-> parents: mixed (per child checked)
	-> children: checked


treeclass processes
unchecked -> mixed -> checked -> unchecked

x = check - has a check mark == true
m = mixed - has indetermanet mark (square) == null
u = unchkd - has no mark (blank) == false
- = unset - has no mark (blank) == false
d = checkbox is dual state
t = checkbox is three state

0. node default os unchecked and prior is unset

1. parents - set per nodes
	> update parents - unless no change, then stop
	> when a parent becomes mixed, change to three state
	> when a parent becomes unchecked, change to two state
2. self - if two state: unchecked to checked to unchecked | three state: unchecked to mixed to checked to unchecked
	> update parents
	> undate children
3. children
	> change from the bottom up
	> when a child becomes mixed, set as three state
	> when a child becomes unchecked, set as two state
	> parent to checked
		> all children, save current to prior
		> all children, set to checked
	> parent to unchecked (parent was checked just before so prior saved - no change here)
		> all children to unchecked, when unchecked, change to two state
	> parent to mixed
		> all children: restore from prior.  when mixed, change to three state
		> all children, prior becomes unset



   1             | 2             | 3             | 4             | 5             | 6             | 7             | 8             | 8             | 9             | 9             |
  ---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|
A d[u]-          |t[m]u          |t[m]u          |t[m]u          |t[u]u          |t[m]u          |t[m]u          |t[m]u          |t[m]u          |t[m]u          |t[m]u          |
  ---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|
B   d[u]-        |  d[u]-        |  d[u]-        |  d[u]-        |  d[u]-        |  d[u]-        |  d[u]-        |  d[u]-        |  d[u]-        |  d[u]-        |  d[u]-        |
  ---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|
C   d[u]-        |  t[m]u        |  t[m]u        |  t[m]u        |  t[u]u        |  t[m]u        |  t[m]u        |  t[m]u        |  t[m]u        |  t[m]u        |  t[m]u        |
  ---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|
D      d[u]-     |     d[u]-     |     d[u]-     |     d[u]-     |     d[u]-     |     d[u]-     |     d[u]-     |     d[u]-     |     d[u]-     |     d[u]-     |     d[u]-     |
  ---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|
E      d[u]-     |     t[m]u     |     t[m]u     |*    t[x]m     |*    t[u]x     |*    t[m]u     |     t[x]u     |     t[m]u     |*    t[x]-     |*    t[u]-     |*    t[m]-     |
  ---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|
F        d[u]-   |       d[u]-   |*      d[x]-   |       d[x]x   |       d[u]x   |       d[x]-   |       d[x]-   |       d[x]-   |       d[x]x   |       d[u]x   |       d[x]-   |
  ---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|
G        d[u]-   |       t[m]u   |       t[m]-   |       t[x]m   |       t[u]m   |       t[m]u   |*      t[x]u   |*      t[u]u   |       t[x]u   |       t[u]u   |       t[u]-   |
  ---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|
H          d[u]- |*        d[x]- |         d[x]- |         d[x]x |         d[u]x |         d[x]- |         d[x]x |         d[u]x |         d[x]u |         d[u]u |         d[u]- |
  ---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|
I          d[u]- |         d[u]- |         d[u]- |         d[x]u |         d[u]u |         d[u]- |         d[x]u |         d[u]u |         d[x]u |         d[u]u |         d[u]- |
  ---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|---------------|

1  start
2  H checked (unset -> checked) (false -> true)
 	 parents become m & t & save to prior
3  F checked  (unset -> checked) (false -> true)
 	 parent E - no change - stop updating
4  E checked (mixed to checked) (null to true)
 	 children - all, save to prior; all to checked; three state, no change
 	 parent C - no change - stop updating
5  E checked (checked to unchecked) (true to false)
 	 children = all to unchecked.  no change to prior since prior has a value
 	 parents = all change tp unchecked, 
6  E checked (unchecked to mixed) (false to null)
 	 children (from bottom up) set per prior, prior to unset
 	 parents per nodes selected
 	 (matches 4)
7  H checked (checked to unchecked) (true to false)
	 children


   6a            |   6b            |
  ---------------|  ---------------|
  t[m]-          |* t[m]-          |
  ---------------|  ---------------|
    d[-]-        |    d[-]-        |
  ---------------|  ---------------|
    t[m]-        |    t[m]-        |
  ---------------|  ---------------|
       d[-]-     |       d[-]-     |
  ---------------|  ---------------|
       t[m]-     |       t[m]-     |
  ---------------|  ---------------|
         d[x]-   |         d[x]-   |
  ---------------|  ---------------|
  *      t[m]-   |         t[m]-   |
  ---------------|  ---------------|
           d[x]- |           d[x]- |
  ---------------|  ---------------|
           d[-]- |           d[-]- |
  ---------------|  ---------------|

alt
6a G checked (unchecked to mixed) (false to null) 
	 children - set per prior, prior to unset
	 parents per nodes selected

alt
6b A checked (unchecked to mixed) (false to null)
	 children - (from the bottom up) - set per prior, if no prior, per nodes
	 parent (n/a)


     4b            |
    ---------------|
  A t[m]           |
    ---------------|
  B   d[-]         |
    ---------------|
  C   t[x]         |
    ---------------|
  D *    d[x]      |
    ---------------|
  E      t[x]      |
    ---------------|
  F        d[x]x   |
    ---------------|
  G        t[x]m   |
    ---------------|
  H          d[x]x |
    ---------------|
  I          d[x]- |
    ---------------|

alt
4b D checked (unset -> checked) (false -> true)
	 parent update per child nodes
	  



treeclass processes
unchecked -> mixed -> checked -> unchecked

x = check - has a check mark == true
m = mixed - has indetermanet mark (square) == null
u = unchkd - has no mark (blank) == false
- = unset - has no mark (blank) == false
d = checkbox is dual state
t = checkbox is three state


start 
nothing selected

CASE I

   1             |    2             |    3             |    4             |    5             |
  ---------------|   ---------------|   ---------------|   ---------------|   ---------------|
A t[u]-          | A t[m]-          | A t[u]-          | A t[m]-          | A t[m]-          |
  ---------------|   ---------------|   ---------------|   ---------------|   ---------------|
B   t[u]-        | B   t[u]-        | B   t[u]-        | B   t[u]-        | B   t[u]-        |
  ---------------|   ---------------|   ---------------|   ---------------|   ---------------|
C   t[u]-        | C   t[m]-        | C   t[u]-        | C   t[m]-        | C   t[m]-        |
  ---------------|   ---------------|   ---------------|   ---------------|   ---------------|
D      t[u]-     | D      t[u]-     | D      t[u]-     | D      t[u]-     | D      t[u]-     |
  ---------------|   ---------------|   ---------------|   ---------------|   ---------------|
E      t[u]-     | E x    t[x]-     | E d    t[u]-     | E x    t[x]-     | E      t[m]-     |
  ---------------|   ---------------|   ---------------|   ---------------|   ---------------|
F        t[u]-   | F        t[x]-   | F        t[u]-   | F        t[x]-   | F d      t[u]-   |
  ---------------|   ---------------|   ---------------|   ---------------|   ---------------|
G        t[u]-   | G        t[x]-   | G        t[u]-   | G        t[x]-   | G        t[x]-   |
  ---------------|   ---------------|   ---------------|   ---------------|   ---------------|
H          t[u]- | H          t[x]- | H          t[u]- | H          t[x]- | H          t[x]- |
  ---------------|   ---------------|   ---------------|   ---------------|   ---------------|
I          t[u]- | I          t[x]- | I          t[u]- | I          t[x]- | I          t[x]- |
  ---------------|   ---------------|   ---------------|   ---------------|   ---------------|

  unchecked -> mixed -> checked -> unchecked

  notes:
  all check boxes are tristate
  however, for the box checked:  u -> x when all children are deselected

  notes:
	when unchecked is selected
		when all children are unchecked
	(column 2) (column 4)
		children to checked
		parents to checked or mixed as applies

	when checked is deselcted
	(column 3)
		children to unchecked
		parents to unchecked or mixed as applies

	when selected is deselected
		when no children
	(column 5)
		deselect
		parents to unchecked or mixed as applies
		


CASE II

    4             |    5             |
   ---------------|   ---------------|
 A t[m]-          | A t[m]-          |
   ---------------|   ---------------|
 B   t[u]-        | B   t[u]-        |
   ---------------|   ---------------|
 C   t[m]-        | C   t[m]-        |
   ---------------|   ---------------|
 D      t[u]-     | D x    t[x]-     |
   ---------------|   ---------------|
 E x    t[x]-     | E      t[x]-     |
   ---------------|   ---------------|
 F        t[x]-   | F        t[x]-   |
   ---------------|   ---------------|
 G        t[x]-   | G        t[x]-   |
   ---------------|   ---------------|
 H          t[x]- | H          t[x]- |
   ---------------|   ---------------|
 I          t[x]- | I          t[x]- |
   ---------------|   ---------------|
 
 notes:
	when unchecked is checked
		when no children
	(column 5)
		select
		parents to checked or mixed as applies


CASE III
 
    4             |    5             |    6             |    7             |    8             |
   ---------------|   ---------------|   ---------------|   ---------------|   ---------------|
 A t[m]-          | A t[m]-          | A t[m]-          | A t[m]-          | A t[m]-          |
   ---------------|   ---------------|   ---------------|   ---------------|   ---------------|
 B   t[x]-        | B   t[x]-        | B   t[x]-        | B   t[x]-        | B   t[x]-        |
   ---------------|   ---------------|   ---------------|   ---------------|   ---------------|
 C   t[m]-        | C   t[m]-        | C   t[m]-        | C   t[u]-        | C   t[m]-        |
   ---------------|   ---------------|   ---------------|   ---------------|   ---------------|
 D      t[u]-     | D      t[u]-     | D      t[u]-     | D      t[u]-     | D      t[u]-     |
   ---------------|   ---------------|   ---------------|   ---------------|   ---------------|
 E x    t[x]-     | E      t[m]-     | E x    t[x]m     | E d    t[u]m     | E x    t[m]-     |
   ---------------|   ---------------|   ---------------|   ---------------|   ---------------|
 F        t[x]-   | F        t[x]-   | F        t[x]x   | F        t[u]x   | F        t[x]-   |
   ---------------|   ---------------|   ---------------|   ---------------|   ---------------|
 G        t[x]-   | G        t[m]-   | G        t[x]m   | G        t[u]m   | G        t[m]-   |
   ---------------|   ---------------|   ---------------|   ---------------|   ---------------|
 H          t[x]- | H d        t[u]- | H          t[x]u | H          t[u]u | H          t[u]- |
   ---------------|   ---------------|   ---------------|   ---------------|   ---------------|
 I          t[x]- | I          t[x]- | I          t[x]x | I          t[u]x | I          t[x]- |
   ---------------|   ---------------|   ---------------|   ---------------|   ---------------|

   notes: when mixed checked
		when prior checked != null
		when parent prior checked == null
		(column 6)
			save checked state to prior
			select all children
			set parent to mixed orchecked (etc.)

		when selected is deselected
			when prior checked is not null and
			when parent prior checked is null
		(column 7)
			children to unchecked
			parents to unchecked or mixed unchecked as applies

		when unchecked is selected
			when prior checked != null
			when parent prior checked == null
		(column 8)
			current restore prior checked
			children restore prior checked
			parents to checked or mixed as applies

CASE IV
 
    4             |    5             |    6             |    7             |
   ---------------|   ---------------|   ---------------|   ---------------|
 A t[m]-          | A t[m]-          | A t[m]-          | A t[m]-          |
   ---------------|   ---------------|   ---------------|   ---------------|
 B   t[u]-        | B   t[u]-        | B   t[u]-        | B   t[u]-        |
   ---------------|   ---------------|   ---------------|   ---------------|
 C   t[m]-        | C   t[m]-        | C   t[m]-        | C   t[m]-        |
   ---------------|   ---------------|   ---------------|   ---------------|
 D      t[u]-     | D      t[u]-     | D      t[u]-     | D      t[u]-     |
   ---------------|   ---------------|   ---------------|   ---------------|
 E x    t[x]-     | E      t[m]-     | E x    t[x]m     | E      t[m]-     |
   ---------------|   ---------------|   ---------------|   ---------------|
 F        t[x]-   | F        t[x]-   | F        t[x]x   | F        t[x]-   |
   ---------------|   ---------------|   ---------------|   ---------------|
 G        t[x]-   | G        t[m]-   | G        t[x]m   | G d      t[u]-   |
   ---------------|   ---------------|   ---------------|   ---------------|
 H          t[x]- | H d        t[u]- | H          t[x]u | H          t[u]- |
   ---------------|   ---------------|   ---------------|   ---------------|
 I          t[x]- | I          t[x]- | I          t[x]x | I          t[u]- |
   ---------------|   ---------------|   ---------------|   ---------------|


notes: when checked is dechecked
		when parent prior checked != null
		when prior checked != null
	(column 7)
		uncheck children
		set parent to mixed or unchecked (etc.)
		remove all parent prior checked
		remove all children prior checked

unchecked -> mixed -> checked -> unchecked
false     -> null  -> true    -> false

unchecked selected, becomes selected

	A)  (A)(J)
		(CASE I: column 2 & 4)
		* all children are unchecked
		> current: check
		> children to checked

	B)  (H)
		(CASE II: column 5)
		* no children
		> current: check
		> skip children

	C)  (E)
		(CASE III: column 8)
		* when prior checked != null
		* n/a| when parent prior checked == null
		> current: restore to prior
		> children: restore to prior
		> prior checked to null
	
	Parents: to checked or mixed as applies

unchecked selected

checked selected, becomes unselected

	A)  (K)
		(CASE I: column 3)
		> current: uncheck
		> children: uncheck

	B)  (I)
		(CASE I: column 5)
		* no children
		> current: uncheck
		> skip children

	C)  (C)
		(CASE III: column 7)
		* when prior checked != null
		* when parent prior checked == null
		> current: uncheck
		> children: uncheck

	D)  (G)
		(CASE IV: column 7)
		* when prior checked != null
		* when parent prior checked != null
		> current: uncheck
		> children: uncheck
		> remove all parent prior checked
		> remove all children prior checked

	parents to unchecked or mixed unchecked as applies

checked selected

mixed selected, becomes checked

A)  (F)
	(CASE III: column 6)
	* when parent prior checked == null
	> current: check / save current to prior checked
	> children: check / save current to prior checked

B) (does not exist)
	* when parent prior checked != null



final test matrix
note:
for mixed:
1. when a node u -> m == not selected / remove from both
2. when a node x -> m == deselected
3. when a node m -> x == selected

Alt:
For current or child, 
1. u->m select
		u->m (C)-E | x->m (F)-E
2. x->m deselect
		x->m (H)-E
3. m->x select
		m->x (I) E
4. m->u deselect
		m->u (H)-G


                   s p |                   s p |                   s p |                   s p |                   s p |                   s p |
                   e r |                   e r |                   e r |                   e r |                   e r |                   e r |           
  (A)*             l i |  (H)*             l i | (B)(F)*           l i | (C)*              l i | (E)*              l i | (F)*              l i |
  (CASE I:         c o |  (CASE I:         c o | (CASE III:        c o | (CASE III:        c o | (CASE III:        c o | (CASE III:        c o |
    column 2 & 4)  t r |    column 5)      t r |    column 6)      t r |    column 7)      t r |    column 8)      t r |    column 6)      t r |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |
 A t[m]-           A   | A t[m]-           A   | A t[m]-           A   | A t[m]-           A   | A t[m]-           A   | A t[m]-           A   |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |
 B   t[x]-         B   | B   t[x]-         B   | B   t[x]-         B   | B   t[x]-         B   | B   t[x]-         B   | B   t[x]-         B   |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |
 C   t[m]-         C   | C   t[m]-         C   | C   t[m]-         C   | C   t[u]-           C | C   t[m]-         C   | C   t[m]-         C   |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |
 D      t[u]-          | D      t[u]-          | D      t[u]-          | D      t[u]-          | D      t[u]-          | D      t[u]-          |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |
 E x    t[x]-      E   | E      t[m]-        E | E x    t[x]m      E   | E d    t[u]m        E | E x    t[m]-      E   | E x    t[x]m      E   |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |
 F        t[x]-    F   | F        t[x]-    F   | F        t[x]x    F   | F        t[u]x      F | F        t[x]-    F   | F        t[x]x    F   |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |
 G        t[x]-    G   | G        t[m]-      G | G        t[x]m    G   | G        t[u]m      G | G        t[m]-    G   | G        t[x]m    G   |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |
 H          t[x]-  H   | H d        t[u]-    H | H          t[x]u  H   | H          t[u]u    H | H          t[u]-    H | H          t[x]u  H   |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |
 I          t[x]-  I   | I          t[x]-  I   | I          t[x]x  I   | I          t[u]x    I | I          t[x]-  I   | I          t[x]x  I   |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |

				   s p |				   s p |				   s p |				   s p |				   s p |
				   e r |				   e r |				   e r |				   e r | 				   e r |
  (F)*             l i |  (G)*             l i |  (H)*             l i |  (I)*             l i |  (J)*			   l i |
  (CASE III:       c o |  (CASE IV:        c o |  (CASE II:        c o |  (CASE I:         c o |  (CASE I:         c o |
    column 6)      t r |    column 7)      t r |    column 5)      t r |    column 5)      t r |    column 2 & 4)  t r |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |
 A t[m]-           A   | A t[m]-           A   | A t[m]-           A   | A t[m]-           A   | A t[m]-           A   |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |
 B   t[x]-         B   | B   t[x]-         B   | B   t[x]-         B   | B   t[x]-         B   | B   t[x]-         B   |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |
 C   t[m]-         C   | C   t[m]-         C   | C   t[m]-         C   | C   t[m]-         C   | C   t[m]-         C   |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |
 D      t[u]-          | D      t[u]-          | D      t[u]-          | D      t[u]-          | D      t[u]-          |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |
 E x    t[x]m      E   | E      t[m]-        E | E      t[m]-        E | E      t[m]-        E | E      t[x]-      E   |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |
 F        t[x]x    F   | F        t[x]-    F   | F        t[x]-    F   | F        t[x]-    F   | F        t[x]-    F   |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |
 G        t[x]m    G   | G d      t[u]-      G | G        t[m]-    G   | G        t[u]-      G | G x      t[x]-    G   |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |
 H          t[x]u  H   | H          t[u]-    H | H  x       t[x]-  H   | H  d       t[u]-    H | H          t[x]-  H   |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |
 I          t[x]x  I   | I          t[u]-    I | I          t[u]-    I | I          t[u]-    I | I          t[x]-  I   |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |

				   s p |				   s p |				   s p |				   s p |				   s p |
				   e r |				   e r |				   e r |				   e r |				   e r |
  (J)*             l i |  (K)*			   l i |  (L)*			   l i |  (M)*			   l i |  (M)*			   l i |
  (CASE I:         c o |  (CASE I:         c o |                   c o |                   c o |                   c o |
    column 2 & 4)  t r |    column 3)      t r |                   t r |                   t r |                   t r |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |
 A t[m]-           A   | A t[m]-           A   | A t[m]-           A   | A t[m]-           A   | A t[m]-           A   |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |
 B   t[x]-         B   | B   t[x]-         B   | B   t[x]-         B   | B   t[x]-         B   | B   t[x]-         B   |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |
 C   t[m]-         C   | C   t[m]-         C   | C x t[x]m         C   | C x t[u]m           C | C x t[m]-         C   |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |
 D      t[u]-          | D      t[u]-          | D      t[x]u      D   | D      t[u]u        D | D      t[u]-        D |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |
 E      t[x]-      E   | E      t[m]-        E | E      t[x]m      E   | E      t[u]m        E | E      t[m]-      E   |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |
 F        t[x]-    F   | F        t[x]-    F   | F        t[x]x    F   | F        t[u]x      F | F        t[x]-    F   |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |
 G x      t[x]-    G   | G  d     t[u]-      G | G        t[x]u    G   | G        t[u]u      G | G        t[u]-      G |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |
 H          t[x]-  H   | H          t[u]-    H | H          t[x]u  H   | H          t[u]u    H | H          t[u]-    H |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |
 I          t[x]-  I   | I          t[u]-    I | I          t[x]u  I   | I          t[u]u    I | I          t[u]-    I |
   ---------------     |   ---------------     |   ---------------     |   ---------------     |   ---------------     |


******* pseudo process ****************************************

@ ATreeSelector
select(node)

@ TreeSelector: select(node)

if (parent prior checked != null)
	current: restore prior checked & set prior checked to null
	children: restore prior checked & set prior checked to null
else
	current: check
	if (not no children)
		children: check

Parents: to checked or mixed as applies


@ ATreeSelector
deselect(node)

@ TreeSelector: deselect(node)

current: uncheck
if (has children) uncheck children

if (prior checked != null)
	children: uncheck
	if (parent prior checked != null)
		current: remove prior checked
		parents: remove all prior checked
		if has children: remove prior checked

parents to unchecked or mixed unchecked as applies


@ ATreeSelector
mixed(node)

@ TreeSelector: mixed(node)		

	current: save state to prior checked / select
	children: save state to prior checked / select
			

******************************************************************



// multi

case 1:
	* via updateselected
	* nothing else selected
	* that is, current list count <=0
	> repeat
		> select node
		> add node to current list
		# select event (on only the one node selected)

case 2:
	* via updateDeselected
	* deselect a selected node
	> repeat
		> deselect node
		> remove node from current list
		> add node to prior list as only node
		# deselect event (on only the one node selected)


// extended

case 1:
	* via updateselected
	* nothing else selected
	* that is, current list count <=0
	# select event (on only the one node selected)
	> prior list make empty
	>> repeat (select branch)
		> current list make new
		> select the node selected
		> add selected to the list
		> loop: select each child nodes / add each to the selected list

case 2: 
	* via updateDeselected
	* deselect a selected child node
	* that is, selectednodes.count > 0
	* that is, selected node is in the current list
	* deselect branch
	# deselect event (on only the one node selected)
	>> repeat (deselect branch)
		> prior list = current list
		> loop: for each node in current list == deselect()
			> set isselected = false;
		> current list make new


case 3:
	* via updateselected
	* select a node from a different branch
	* deselect branch
	# deselect event (on only the one node selected)
	* select branch
	# select event (on only the one node selected)
	* that is, selectednodes.count > 0
	* that is, selected node is NOT in the current list
	>> repeat (deselect branch)
	>> repeat (select branch)

case 4:
	* via updateselected
	* select a parent node in the same branch
	* treat as if case 3.


// individual

case 1: node is selected
	* nothing else selected - that is, current list count == 0
	* via select
	> select the current node
		> addElementToSelected()  [add node to current list]
		> node.select
		# Select event
	> prior list is empty

case 2: node is selected
	* prior selected exists - that is current list count > 0
	* via selected
	> deselect the prior node
		> MoveSelectedToPrior()  [move current list to prior list & current list = new()]
		> node.deselect
		# Deselect event
	> select the current node
		> addElementToSelected()  [add node to current list]
		> node.select
		# Select event


case 3: node is deselected
	* via Deselect
	> deselect the prior node
		> MoveSelectedToPrior()  [move current list to prior list & current list = new()]
		> node.deselect
		# Deselect event



removeElementFromPriorSelected
	> removes a node to the prior selected list - issue updated properties

removeElementFromSelected
	> removes a node to the selected list - issue updated properties

addElementToPriorSelected
	> adds a node to the prior selected list - issue updated properties

addElementToSelected
	> adds a node to the selected list - issue updated properties


MoveSelectedToPrior
	> move the top node in the selecte list to the prior selected list (add then remove)

MoveSelectedListToPrior
	> moves the whole selected list to the prior list
	> selected list = new()
	
